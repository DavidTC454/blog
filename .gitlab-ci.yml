stages:
  - build
  - release

workflow:
  rules:
      - if: $CI_COMMIT_TAG

variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_NAMESPACE}%2F${CI_PROJECT_NAME}/packages/generic/release/${CI_COMMIT_TAG}/"
    GIT_COMMIT_FORMAT: "* [#%h](https://gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/-/commit/%H) | %an: %s"

build:
    stage: build
    image: alpine:latest
    before_script:
        - echo "Installing dependencies"
        - apk add --no-cache curl python3 tar git gitlab-release-cli
        - echo "Installing pip and python dependencies"
        - python3 -m ensurepip
        - pip3 install -r ./requirements.txt
    script:
        - echo "Building app"
        - python3 -m app build
        - echo "Compressing build"
        - tar -cvzf build.tar.gz build
        - echo "Uploading build"
        - |
            curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build.tar.gz "$PACKAGE_REGISTRY_URL"
        - echo "ChangeLog\n $CHANGELOG"
        - echo "Creating release for \"${CI_COMMIT_TAG}\" using \"${PACKAGE_REGISTRY_URL}\""
        - echo -e "### Changes:\n" > CHANGELOG.md
        - |
            git log --oneline --pretty="format:${GIT_COMMIT_FORMAT}" $(git describe --tags --abbrev=0 @^)..@ >> CHANGELOG.md
        - echo -e "\n\nCreated automatically by Gitlab CI." >> CHANGELOG.md
    release:
        name: "Release $CI_COMMIT_TAG"
        description: "./CHANGELOG.md"
        tag_name: "$CI_COMMIT_TAG"
        assets:
            links:
                - name: "Build"
                  url: "${PACKAGE_REGISTRY_URL}build.tar.gz"
                  filepath: "/build/build.tar.gz"
